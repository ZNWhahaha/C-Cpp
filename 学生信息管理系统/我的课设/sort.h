void sort(struct student *phead)//排序
{
	struct student *head,*q,*p;
	int x=0,flag,line=26,row=7;
	double min;
	while(1)
	{
		system("cls");
		gotoxy(15,3);
		printf("===============================================");
		gotoxy(15,4);
		printf("|");
		gotoxy(61,4);
		printf("|");
		gotoxy(15,5);
		printf("|");
		gotoxy(61,5);
		printf("|");
		gotoxy(30,5);
		printf("请选择排序方式");
		gotoxy(15,6);
		printf("|");
		gotoxy(61,6);
		printf("|");
		gotoxy(28,7);
		printf("1.平均分");
		gotoxy(15,7);
		printf("|");
		gotoxy(61,7);
		printf("|");
		gotoxy(40,7);
		printf("2.语文");
		gotoxy(15,8);
		printf("|");
		gotoxy(61,8);
		printf("|");
		gotoxy(28,9);
		printf("3.数学");
		gotoxy(15,9);
		printf("|");
		gotoxy(61,9);
		printf("|");
		gotoxy(40,9);
		printf("4.英语");
		gotoxy(15,10);
		printf("|");
		gotoxy(61,10);
		printf("|");
		gotoxy(30,1);
		printf("★用方向键控制光标★");
		gotoxy(15,11);
		printf("===============================================");
		gotoxy(line,row);
		putch(16);
		flag=getch();
		if(flag==Up)
		{
			row=row-2;
			if(row==5)
			   row=9;
		}
		else if(flag==Down)
		{
			row=row+2;
			if(row==11)
				row=7;
		}
		else if(flag==Left)
		{
			line=line-12;
			if(line==14)
				line=38;
		}
		else if(flag==Right)
		{
			line=line+12;
			if(line==50)
				line=26;
		}
		if(flag==13)
		{
			if(line==26&&row==7)
			{
				head=(struct student *)malloc(sizeof(struct student));
				head->next=NULL;
				while(x<count)
				{
					q=phead->next;
					min=q->avg;
					for(p=phead,q=phead->next;q!=NULL;p=p->next,q=q->next)
						if(q->avg<min)
							min=q->avg;
					for(p=phead,q=phead->next;q!=NULL;)
					{
						if(q->avg==min)
						{
							p->next=q->next;
							q->next=head->next;
							head->next=q;
							x++;
							break;
						}
						else
						{
							p=p->next;
							q=q->next;
						}
					}
				}
				break;
			}
			else if(line==38&&row==7)
			{
				head=(struct student *)malloc(sizeof(struct student));
				head->next=NULL;
				while(x<count)
				{
					q=phead->next;
					min=q->score[0];
					for(p=phead,q=phead->next;q!=NULL;p=p->next,q=q->next)
						if(q->score[0]<min)
							min=q->score[0];
					for(p=phead,q=phead->next;q!=NULL;)
					{
						if(q->score[0]==min)
						{
							p->next=q->next;
							q->next=head->next;
							head->next=q;
							x++;
							break;
						}
						else
						{
							p=p->next;
							q=q->next;
						}
					}
				}
				break;
			}
			else if(line==26&&row==9)
			{
				head=(struct student *)malloc(sizeof(struct student));
				head->next=NULL;
				while(x<count)
				{
				   q=phead->next;
				   min=q->score[1];
				   for(p=phead,q=phead->next;q!=NULL;p=p->next,q=q->next)
						if(q->score[1]<min)
							min=q->score[1];
				   for(p=phead,q=phead->next;q!=NULL;)
				   {
						if(q->score[1]==min)
						{
							p->next=q->next;
							q->next=head->next;
							head->next=q;
							x++;
							break;
						}
						else
						{
							p=p->next;
							q=q->next;
						}
					}
				}
				break;
			}
			else if(line==38&&row==9)
			{
				head=(struct student *)malloc(sizeof(struct student));
				head->next=NULL;
				while(x<count)
				{
					q=phead->next;
					min=q->score[2];
					for(p=phead,q=phead->next;q!=NULL;p=p->next,q=q->next)
						if(q->score[2]<min)
							min=q->score[2];
					for(p=phead,q=phead->next;q!=NULL;)
					{
						if(q->score[2]==min)
						{
							p->next=q->next;
							q->next=head->next;
							head->next=q;
							x++;
							break;
						}
						else
						{
							p=p->next;
							q=q->next;
						}
					}
				 }
				break;
			}
		}
	}
	print(head);
}